{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { Sweetalert } from '../../functions';\nimport { UsersModel } from '../../models/users.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/users.service\";\nimport * as i2 from \"@angular/router\";\nfunction LoginComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(usersService, activatedRoute) {\n      this.usersService = usersService;\n      this.activatedRoute = activatedRoute;\n      this.rememberMe = false;\n      this.user = new UsersModel();\n    }\n    ngOnInit() {\n      /*=============================================\n      Validar acción de recordar credencial de correo\n      =============================================*/\n      if (localStorage.getItem(\"rememberMe\") && localStorage.getItem(\"rememberMe\") == \"yes\") {\n        this.user.email = localStorage.getItem(\"email\");\n        this.rememberMe = true;\n      }\n      /*=============================================\n      Validar formulario de Bootstrap 4\n      =============================================*/\n      // Disable form submissions if there are invalid fields\n      (function () {\n        'use strict';\n\n        window.addEventListener('load', function () {\n          // Get the forms we want to add validation styles to\n          var forms = document.getElementsByClassName('needs-validation');\n          // Loop over them and prevent submission\n          var validation = Array.prototype.filter.call(forms, function (form) {\n            form.addEventListener('submit', function (event) {\n              if (form.checkValidity() === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n              form.classList.add('was-validated');\n            }, false);\n          });\n        }, false);\n      })();\n      /*=============================================\n      Verificar cuenta de correo electrónico\n      =============================================*/\n      if (this.activatedRoute.snapshot.queryParams[\"oobCode\"] != undefined && this.activatedRoute.snapshot.queryParams[\"mode\"] == \"verifyEmail\") {\n        let body = {\n          oobCode: this.activatedRoute.snapshot.queryParams[\"oobCode\"]\n        };\n        this.usersService.confirmEmailVerificationFnc(body).subscribe(resp => {\n          if (resp[\"emailVerified\"]) {\n            /*=============================================\n            Actualizar Confirmación de correo en Database\n            =============================================*/\n            this.usersService.getFilterData(\"email\", resp[\"email\"]).subscribe(resp => {\n              for (const i in resp) {\n                let id = Object.keys(resp).toString();\n                let value = {\n                  needConfirm: true\n                };\n                this.usersService.patchData(id, value).subscribe(resp => {\n                  if (resp[\"needConfirm\"]) {\n                    Sweetalert.fnc(\"success\", \"¡Email confirm, login now!\", \"login\");\n                  }\n                });\n              }\n            });\n          }\n        }, err => {\n          if (err.error.error.message == \"INVALID_OOB_CODE\") {\n            Sweetalert.fnc(\"error\", \"The email has already been confirmed\", \"login\");\n          }\n        });\n      }\n      /*=============================================\n      Confirmar cambio de contraseña\n      =============================================*/\n      if (this.activatedRoute.snapshot.queryParams[\"oobCode\"] != undefined && this.activatedRoute.snapshot.queryParams[\"mode\"] == \"resetPassword\") {\n        let body = {\n          oobCode: this.activatedRoute.snapshot.queryParams[\"oobCode\"]\n        };\n        this.usersService.verifyPasswordResetCodeFnc(body).subscribe(resp => {\n          if (resp[\"requestType\"] == \"PASSWORD_RESET\") {\n            $(\"#newPassword\").modal();\n          }\n        });\n      }\n    }\n    /*=============================================\n    Validación de expresión regular del formulario\n    =============================================*/\n    validate(input) {\n      let pattern;\n      if ($(input).attr(\"name\") == \"email\") {\n        pattern = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n      }\n      if ($(input).attr(\"name\") == \"password\") {\n        pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,}$/;\n      }\n      if (!pattern.test(input.value)) {\n        $(input).parent().addClass('was-validated');\n        input.value = \"\";\n      }\n    }\n    /*=============================================\n    Envío del formulario\n    =============================================*/\n    onSubmit(f) {\n      if (f.invalid) {\n        return;\n      }\n      /*=============================================\n      Alerta suave mientras se registra el usuario\n      =============================================*/\n      Sweetalert.fnc(\"loading\", \"Loading...\", null);\n      /*=============================================\n      Validar que el correo esté verificado\n      =============================================*/\n      this.usersService.getFilterData(\"email\", this.user.email).subscribe(resp1 => {\n        for (const i in resp1) {\n          if (resp1[i].needConfirm) {\n            /*=============================================\n            Login en Firebase Authentication\n            =============================================*/\n            this.user.returnSecureToken = true;\n            this.usersService.loginAuth(this.user).subscribe(resp2 => {\n              /*=============================================\n              Almacenar id Token en Firebase Database\n              =============================================*/\n              let id = Object.keys(resp1).toString();\n              let value = {\n                idToken: resp2[\"idToken\"]\n              };\n              this.usersService.patchData(id, value).subscribe(resp3 => {\n                if (resp3[\"idToken\"] != \"\") {\n                  Sweetalert.fnc(\"close\", null, null);\n                  /*=============================================\n                  Almacenamos el Token de seguridad en el localstorage\n                  =============================================*/\n                  localStorage.setItem(\"idToken\", resp3[\"idToken\"]);\n                  /*=============================================\n                  Almacenamos el email en el localstorage\n                  =============================================*/\n                  localStorage.setItem(\"email\", resp2[\"email\"]);\n                  /*=============================================\n                  Almacenamos la fecha de expiración localstorage\n                  =============================================*/\n                  let today = new Date();\n                  today.setSeconds(resp2[\"expiresIn\"]);\n                  localStorage.setItem(\"expiresIn\", today.getTime().toString());\n                  /*=============================================\n                  Almacenamos recordar email en el localStorage\n                  =============================================*/\n                  if (this.rememberMe) {\n                    localStorage.setItem(\"rememberMe\", \"yes\");\n                  } else {\n                    localStorage.setItem(\"rememberMe\", \"no\");\n                  }\n                  /*=============================================\n                  Redireccionar al usuario a la página de su cuenta\n                  =============================================*/\n                  window.open(\"account\", \"_top\");\n                }\n              });\n            }, err => {\n              Sweetalert.fnc(\"error\", err.error.error.message, null);\n            });\n          } else {\n            Sweetalert.fnc(\"error\", 'Need Confirm your email', null);\n          }\n        }\n      });\n    }\n    /*=============================================\n    Enviar solicitud para recuperar Contraseña\n    =============================================*/\n    resetPassword(value) {\n      Sweetalert.fnc(\"loading\", \"Loading...\", null);\n      this.usersService.getFilterData(\"email\", value).subscribe(resp => {\n        if (Object.keys(resp).length > 0) {\n          let body = {\n            requestType: \"PASSWORD_RESET\",\n            email: value\n          };\n          this.usersService.sendPasswordResetEmailFnc(body).subscribe(resp => {\n            if (resp[\"email\"] == value) {\n              Sweetalert.fnc(\"success\", \"Check your email to change the password\", \"login\");\n            }\n          });\n        } else {\n          Sweetalert.fnc(\"error\", \"The email does not exist in our database\", null);\n        }\n      });\n    }\n    /*=============================================\n    Enviar nueva Contraseña\n    =============================================*/\n    newPassword(value) {\n      if (value != \"\") {\n        Sweetalert.fnc(\"loading\", \"Loading...\", null);\n        let body = {\n          oobCode: this.activatedRoute.snapshot.queryParams[\"oobCode\"],\n          newPassword: value\n        };\n        this.usersService.confirmPasswordResetFnc(body).subscribe(resp => {\n          if (resp[\"requestType\"] == \"PASSWORD_RESET\") {\n            Sweetalert.fnc(\"success\", \"Password change successful, login now\", \"login\");\n          }\n        });\n      }\n    }\n    /*=============================================\n    Login con Facebook\n    =============================================*/\n    facebookLogin() {\n      let localUsersService = this.usersService;\n      let localUser = this.user;\n      // https://firebase.google.com/docs/web/setup\n      // Crea una nueva APP en Settings\n      // npm install --save firebase\n      // Agregar import * as firebase from \"firebase/app\";\n      // import \"firebase/auth\";\n      /*=============================================\n      Inicializa Firebase en tu proyecto web\n      =============================================*/\n      // Your web app's Firebase configuration\n      const firebaseConfig = {\n        apiKey: \"api-key\",\n        authDomain: \"project-id.firebaseapp.com\",\n        databaseURL: \"https://project-id.firebaseio.com\",\n        projectId: \"project-id\",\n        storageBucket: \"project-id.appspot.com\",\n        messagingSenderId: \"sender-id\",\n        appID: \"app-id\"\n      };\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      //https://firebase.google.com/docs/auth/web/facebook-login\n      /*=============================================\n      Crea una instancia del objeto proveedor de Facebook\n      =============================================*/\n      var provider = new firebase.auth.FacebookAuthProvider();\n      /*=============================================\n      acceder con una ventana emergente y con certificado SSL (https)\n      =============================================*/\n      //ng serve --ssl true --ssl-cert \"/path/to/file.crt\" --ssl-key \"/path/to/file.key\"\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        loginFirebaseDatabase(result, localUser, localUsersService);\n      }).catch(function (error) {\n        var errorMessage = error.message;\n        Sweetalert.fnc(\"error\", errorMessage, \"login\");\n      });\n      /*=============================================\n      Registramos al usuario en Firebase Database\n      =============================================*/\n      function loginFirebaseDatabase(result, localUser, localUsersService) {\n        var user = result.user;\n        if (user.P) {\n          localUsersService.getFilterData(\"email\", user.email).subscribe(resp => {\n            if (Object.keys(resp).length > 0) {\n              if (resp[Object.keys(resp)[0]].method == \"facebook\") {\n                /*=============================================\n                Actualizamos el idToken en Firebase\n                =============================================*/\n                let id = Object.keys(resp).toString();\n                let body = {\n                  idToken: user.b.b.g\n                };\n                localUsersService.patchData(id, body).subscribe(resp => {\n                  /*=============================================\n                  Almacenamos el Token de seguridad en el localstorage\n                  =============================================*/\n                  localStorage.setItem(\"idToken\", user.b.b.g);\n                  /*=============================================\n                  Almacenamos el email en el localstorage\n                  =============================================*/\n                  localStorage.setItem(\"email\", user.email);\n                  /*=============================================\n                  Almacenamos la fecha de expiración localstorage\n                  =============================================*/\n                  let today = new Date();\n                  today.setSeconds(3600);\n                  localStorage.setItem(\"expiresIn\", today.getTime().toString());\n                  /*=============================================\n                  Redireccionar al usuario a la página de su cuenta\n                  =============================================*/\n                  window.open(\"account\", \"_top\");\n                });\n              } else {\n                Sweetalert.fnc(\"error\", `You're already signed in, please login with ${resp[Object.keys(resp)[0]].method} method`, \"login\");\n              }\n            } else {\n              Sweetalert.fnc(\"error\", \"This account is not registered\", \"register\");\n            }\n          });\n        }\n      }\n    }\n    /*=============================================\n    Login con Google\n    =============================================*/\n    googleLogin() {\n      let localUsersService = this.usersService;\n      let localUser = this.user;\n      // https://firebase.google.com/docs/web/setup\n      // Crea una nueva APP en Settings\n      // npm install --save firebase\n      // Agregar import * as firebase from \"firebase/app\";\n      // import \"firebase/auth\";\n      /*=============================================\n      Inicializa Firebase en tu proyecto web\n      =============================================*/\n      // Your web app's Firebase configuration\n      const firebaseConfig = {\n        apiKey: \"api-key\",\n        authDomain: \"project-id.firebaseapp.com\",\n        databaseURL: \"https://project-id.firebaseio.com\",\n        projectId: \"project-id\",\n        storageBucket: \"project-id.appspot.com\",\n        messagingSenderId: \"sender-id\",\n        appID: \"app-id\"\n      };\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      //https://firebase.google.com/docs/auth/web/facebook-login\n      /*=============================================\n      Crea una instancia del objeto proveedor de Google\n      =============================================*/\n      var provider = new firebase.auth.GoogleAuthProvider();\n      /*=============================================\n      acceder con una ventana emergente\n      =============================================*/\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        loginFirebaseDatabase(result, localUser, localUsersService);\n      }).catch(function (error) {\n        var errorMessage = error.message;\n        Sweetalert.fnc(\"error\", errorMessage, \"login\");\n      });\n      /*=============================================\n      Registramos al usuario en Firebase Database\n      =============================================*/\n      function loginFirebaseDatabase(result, localUser, localUsersService) {\n        var user = result.user;\n        if (user.P) {\n          localUsersService.getFilterData(\"email\", user.email).subscribe(resp => {\n            if (Object.keys(resp).length > 0) {\n              if (resp[Object.keys(resp)[0]].method == \"google\") {\n                /*=============================================\n                Actualizamos el idToken en Firebase\n                =============================================*/\n                let id = Object.keys(resp).toString();\n                let body = {\n                  idToken: user.b.b.g\n                };\n                localUsersService.patchData(id, body).subscribe(resp => {\n                  /*=============================================\n                  Almacenamos el Token de seguridad en el localstorage\n                  =============================================*/\n                  localStorage.setItem(\"idToken\", user.b.b.g);\n                  /*=============================================\n                  Almacenamos el email en el localstorage\n                  =============================================*/\n                  localStorage.setItem(\"email\", user.email);\n                  /*=============================================\n                  Almacenamos la fecha de expiración localstorage\n                  =============================================*/\n                  let today = new Date();\n                  today.setSeconds(3600);\n                  localStorage.setItem(\"expiresIn\", today.getTime().toString());\n                  /*=============================================\n                  Redireccionar al usuario a la página de su cuenta\n                  =============================================*/\n                  window.open(\"account\", \"_top\");\n                });\n              } else {\n                Sweetalert.fnc(\"error\", `You're already signed in, please login with ${resp[Object.keys(resp)[0]].method} method`, \"login\");\n              }\n            } else {\n              Sweetalert.fnc(\"error\", \"This account is not registered\", \"register\");\n            }\n          });\n        }\n      }\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.UsersService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 104,\n        vars: 5,\n        consts: [[\"f\", \"ngForm\"], [\"email\", \"\"], [\"password\", \"\"], [\"emailPass\", \"\"], [1, \"ps-breadcrumb\"], [1, \"container\"], [1, \"breadcrumb\"], [\"href\", \"index.html\"], [1, \"ps-my-account\"], [\"novalidate\", \"\", 1, \"ps-form--account\", \"ps-tab-root\", \"needs-validation\", 3, \"ngSubmit\"], [1, \"ps-tab-list\"], [1, \"active\"], [\"href\", \"login\"], [1, \"\"], [\"href\", \"register\"], [1, \"ps-tabs\"], [\"id\", \"sign-in\", 1, \"ps-tab\", \"active\"], [1, \"ps-form__content\"], [1, \"form-group\"], [\"type\", \"text\", \"placeholder\", \"Email address\", \"name\", \"email\", \"email\", \"\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"change\", \"ngModel\"], [1, \"valid-feedback\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"form-group\", \"form-forgot\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"name\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"change\", \"ngModel\"], [\"href\", \"#resetPassword\", \"data-toggle\", \"modal\"], [1, \"ps-checkbox\"], [\"type\", \"checkbox\", \"id\", \"remember-me\", \"name\", \"remember-me\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"remember-me\"], [1, \"form-group\", \"submtit\"], [1, \"ps-btn\", \"ps-btn--fullwidth\"], [1, \"ps-form__footer\"], [1, \"ps-list--social\"], [1, \"facebook\", 2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fab\", \"fa-facebook-f\"], [1, \"google\", 2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"fab\", \"fa-google\"], [\"id\", \"resetPassword\", 1, \"modal\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"close\"], [1, \"modal-body\"], [\"novalidate\", \"\", 1, \"ps-form--account\", \"ps-tab-root\", \"needs-validation\"], [\"type\", \"email\", \"placeholder\", \"Input your email address\", \"name\", \"email\", \"email\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"type\", \"button\", 1, \"ps-btn\", \"ps-btn--fullwidth\", 3, \"click\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn\", \"btn-danger\"], [\"id\", \"newPassword\", 1, \"modal\"], [\"type\", \"password\", \"placeholder\", \"Input your new password\", \"name\", \"password\", \"minlength\", \"4\", \"pattern\", \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,}\", \"data-toggle\", \"tooltip\", \"title\", \"Enter your password with at least 4 characters and must include uppercase, lowercase letters and numbers\", \"required\", \"\", 1, \"form-control\", 3, \"change\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"ul\", 6)(3, \"li\")(4, \"a\", 7);\n            i0.ɵɵtext(5, \"Home\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(6, \"li\");\n            i0.ɵɵtext(7, \"Login\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(8, \"div\", 8)(9, \"div\", 5)(10, \"form\", 9, 0);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const f_r2 = i0.ɵɵreference(11);\n              return i0.ɵɵresetView(ctx.onSubmit(f_r2));\n            });\n            i0.ɵɵelementStart(12, \"ul\", 10)(13, \"li\", 11)(14, \"p\")(15, \"a\", 12);\n            i0.ɵɵtext(16, \"Login\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(17, \"li\", 13)(18, \"p\")(19, \"a\", 14);\n            i0.ɵɵtext(20, \"Register\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(21, \"div\", 15)(22, \"div\", 16)(23, \"div\", 17)(24, \"h5\");\n            i0.ɵɵtext(25, \"Log In Your Account\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(26, \"div\", 18)(27, \"input\", 19, 1);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_27_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.email, $event) || (ctx.user.email = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵlistener(\"change\", function LoginComponent_Template_input_change_27_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const email_r3 = i0.ɵɵreference(28);\n              return i0.ɵɵresetView(ctx.validate(email_r3));\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(29, \"div\", 20);\n            i0.ɵɵtext(30, \"Valid.\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(31, LoginComponent_div_31_Template, 2, 0, \"div\", 21);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"div\", 22)(33, \"input\", 23, 2);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_33_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.password, $event) || (ctx.user.password = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵlistener(\"change\", function LoginComponent_Template_input_change_33_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const password_r4 = i0.ɵɵreference(34);\n              return i0.ɵɵresetView(ctx.validate(password_r4));\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(35, \"div\", 20);\n            i0.ɵɵtext(36, \"Valid.\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(37, LoginComponent_div_37_Template, 2, 0, \"div\", 21);\n            i0.ɵɵelementStart(38, \"a\", 24);\n            i0.ɵɵtext(39, \"Forgot?\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(40, \"div\", 18)(41, \"div\", 25)(42, \"input\", 26);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_42_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.rememberMe, $event) || (ctx.rememberMe = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(43, \"label\", 27);\n            i0.ɵɵtext(44, \"Remember me\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(45, \"div\", 28)(46, \"button\", 29);\n            i0.ɵɵtext(47, \"Login\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(48, \"div\", 30)(49, \"p\");\n            i0.ɵɵtext(50, \"Connect with:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(51, \"ul\", 31)(52, \"li\")(53, \"a\", 32);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_a_click_53_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.facebookLogin());\n            });\n            i0.ɵɵelement(54, \"i\", 33);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(55, \"li\")(56, \"a\", 34);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_a_click_56_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.googleLogin());\n            });\n            i0.ɵɵelement(57, \"i\", 35);\n            i0.ɵɵelementEnd()()()()()()()()();\n            i0.ɵɵelementStart(58, \"div\", 36)(59, \"div\", 37)(60, \"div\", 38)(61, \"div\", 39)(62, \"h4\", 40);\n            i0.ɵɵtext(63, \"Reset Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(64, \"button\", 41);\n            i0.ɵɵtext(65, \"\\u00D7\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(66, \"div\", 42)(67, \"form\", 43)(68, \"div\", 18);\n            i0.ɵɵelement(69, \"input\", 44, 3);\n            i0.ɵɵelementStart(71, \"div\", 20);\n            i0.ɵɵtext(72, \"Valid.\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(73, \"div\", 45);\n            i0.ɵɵtext(74, \"Please fill in this field correctly.\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(75, \"div\", 28)(76, \"button\", 46);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_76_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const emailPass_r5 = i0.ɵɵreference(70);\n              return i0.ɵɵresetView(ctx.resetPassword(emailPass_r5.value));\n            });\n            i0.ɵɵtext(77, \"Submit\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(78, \"div\", 47)(79, \"button\", 48);\n            i0.ɵɵtext(80, \"Close\");\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(81, \"div\", 49)(82, \"div\", 37)(83, \"div\", 38)(84, \"div\", 39)(85, \"h4\", 40);\n            i0.ɵɵtext(86, \"New Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(87, \"button\", 41);\n            i0.ɵɵtext(88, \"\\u00D7\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(89, \"div\", 42)(90, \"form\", 43)(91, \"div\", 18)(92, \"input\", 50, 2);\n            i0.ɵɵlistener(\"change\", function LoginComponent_Template_input_change_92_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const password_r4 = i0.ɵɵreference(34);\n              return i0.ɵɵresetView(ctx.validate(password_r4));\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(94, \"div\", 20);\n            i0.ɵɵtext(95, \"Valid.\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(96, \"div\", 45);\n            i0.ɵɵtext(97, \"Please fill in this field correctly.\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(98, \"div\", 28)(99, \"button\", 46);\n            i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_99_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const password_r4 = i0.ɵɵreference(34);\n              return i0.ɵɵresetView(ctx.newPassword(password_r4.value));\n            });\n            i0.ɵɵtext(100, \"Submit\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(101, \"div\", 47)(102, \"button\", 48);\n            i0.ɵɵtext(103, \"Close\");\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            const f_r2 = i0.ɵɵreference(11);\n            i0.ɵɵadvance(27);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.email);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"email\"].errors);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.password);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"password\"].errors);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.rememberMe);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}