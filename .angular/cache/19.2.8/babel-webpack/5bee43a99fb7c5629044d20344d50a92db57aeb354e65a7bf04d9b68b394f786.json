{"ast":null,"code":"import { Path, Payu, MercadoPago } from '../../config';\nimport { Sweetalert, DinamicPrice, Paypal } from '../../functions';\nimport { UsersModel } from '../../models/users.model';\nimport * as Cookies from 'js-cookie';\nimport { Md5 } from 'md5-typescript';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/users.service\";\nimport * as i3 from \"../../services/products.service\";\nimport * as i4 from \"../../services/orders.service\";\nimport * as i5 from \"../../services/sales.service\";\nimport * as i6 from \"../../services/stores.service\";\nfunction CheckoutComponent_option_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 56);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const country_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", country_r4.name);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(country_r4.name);\n  }\n}\nfunction CheckoutComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CheckoutComponent_div_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CheckoutComponent_div_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CheckoutComponent_div_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtext(1, \"Please fill out this field.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CheckoutComponent_tr_101_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"a\", 58);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 45);\n    i0.ɵɵelementStart(5, \"div\", 59);\n    i0.ɵɵtext(6, \"Quantity: \");\n    i0.ɵɵelementStart(7, \"span\", 60);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 61);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"td\", 62);\n    i0.ɵɵelement(12, \"div\", 63);\n    i0.ɵɵelementStart(13, \"div\", 64);\n    i0.ɵɵelement(14, \"div\", 65);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r9 = ctx.$implicit;\n    const lastIndex_r10 = ctx.last;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"href\", \"product/\", product_r9.url, \"\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", product_r9.name, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"innerHTML\", product_r9.details, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(product_r9.quantity);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(product_r9.shipping);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", product_r9.price, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", lastIndex_r10 ? ctx_r10.callback() : \"\", \" \");\n  }\n}\nfunction CheckoutComponent_div_106_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtext(1, \"Please select pay method.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let CheckoutComponent = /*#__PURE__*/(() => {\n  class CheckoutComponent {\n    constructor(router, usersService, productsService, ordersService, salesService, storesService, activatedRoute) {\n      this.router = router;\n      this.usersService = usersService;\n      this.productsService = productsService;\n      this.ordersService = ordersService;\n      this.salesService = salesService;\n      this.storesService = storesService;\n      this.activatedRoute = activatedRoute;\n      this.path = Path.url;\n      this.id = null;\n      this.saveAddress = false;\n      this.countries = null;\n      this.dialCode = null;\n      this.shoppingCart = [];\n      this.totalShoppingCart = 0;\n      this.render = true;\n      this.totalP = ` <h3 class=\"text-right\">Total <span class=\"totalCheckout\"><div class=\"spinner-border\"></div></span></h3>`;\n      this.totalPrice = [];\n      this.subTotalPrice = [];\n      this.paymentMethod = \"\";\n      this.addInfo = \"\";\n      this.validateCoupon = false;\n      this.user = new UsersModel();\n    }\n    ngOnInit() {\n      /*=============================================\n      Validar la existencia de un cupón de la tienda\n      =============================================*/\n      if (Cookies.get('coupon') != undefined) {\n        this.storesService.getFilterData(\"url\", Cookies.get('coupon')).subscribe(resp => {\n          this.validateCoupon = true;\n        });\n      }\n      /*=============================================\n      Validar si existe usuario autenticado\n      =============================================*/\n      this.usersService.authActivate().then(resp => {\n        if (resp) {\n          this.usersService.getFilterData(\"idToken\", localStorage.getItem(\"idToken\")).subscribe(resp => {\n            this.id = Object.keys(resp).toString();\n            for (const i in resp) {\n              this.user.displayName = resp[i].displayName;\n              this.user.username = resp[i].username;\n              this.user.email = resp[i].email;\n              this.user.country = resp[i].country;\n              this.user.city = resp[i].city;\n              if (resp[i].phone != undefined) {\n                this.user.phone = resp[i].phone.split(\"-\")[1];\n                this.dialCode = resp[i].phone.split(\"-\")[0];\n              }\n              this.user.address = resp[i].address;\n              /*=============================================\n              Traer listado de países\n              =============================================*/\n              this.usersService.getCountries().subscribe(resp => {\n                this.countries = resp;\n              });\n            }\n          });\n        }\n      });\n      /*=============================================\n      Traer la lista del carrito de compras\n      =============================================*/\n      if (localStorage.getItem(\"list\")) {\n        let list = JSON.parse(localStorage.getItem(\"list\"));\n        this.totalShoppingCart = list.length;\n        if (list.length == 0) {\n          this.router.navigateByUrl(\"/shopping-cart\");\n          return;\n        }\n        /*=============================================\n        Recorremos el arreglo del listado\n        =============================================*/\n        for (const i in list) {\n          /*=============================================\n          Filtramos los productos del carrito de compras\n          =============================================*/\n          this.productsService.getFilterData(\"url\", list[i].product).subscribe(resp => {\n            for (const f in resp) {\n              let details = `<div class=\"list-details small text-secondary\">`;\n              if (list[i].details.length > 0) {\n                let specification = JSON.parse(list[i].details);\n                for (const i in specification) {\n                  let property = Object.keys(specification[i]);\n                  for (const f in property) {\n                    details += `<div>${property[f]}: ${specification[i][property[f]]}</div>`;\n                  }\n                }\n              } else {\n                /*=============================================\n                Mostrar los detalles por defecto del producto\n                =============================================*/\n                if (resp[f].specification != \"\") {\n                  let specification = JSON.parse(resp[f].specification);\n                  for (const i in specification) {\n                    let property = Object.keys(specification[i]).toString();\n                    details += `<div>${property}: ${specification[i][property][0]}</div>`;\n                  }\n                }\n              }\n              details += `</div>`;\n              this.shoppingCart.push({\n                url: resp[f].url,\n                name: resp[f].name,\n                category: resp[f].category,\n                image: resp[f].image,\n                delivery_time: resp[f].delivery_time,\n                quantity: list[i].unit,\n                price: DinamicPrice.fnc(resp[f])[0],\n                shipping: Number(resp[f].shipping) * Number(list[i].unit),\n                details: details,\n                listDetails: list[i].details,\n                store: resp[f].store\n              });\n            }\n          });\n        }\n      } else {\n        this.router.navigateByUrl(\"/shopping-cart\");\n        return;\n      }\n    }\n    /*=============================================\n    Guardar datos de envíos del usuario\n    =============================================*/\n    saveAddressFnc(inputCountry, inputCity, inputPhone, inputAddress, inputSaveAddress) {\n      if (this.saveAddress) {\n        if (inputCountry.value != \"\" && inputCity.value != \"\" && inputPhone.value != \"\" && inputAddress.value != \"\") {\n          let body = {\n            country: this.user.country,\n            country_code: this.user.country_code,\n            city: this.user.city,\n            phone: `${this.dialCode}-${this.user.phone}`,\n            address: this.user.address\n          };\n          this.usersService.patchData(this.id, body).subscribe(resp => {\n            Sweetalert.fnc(\"success\", \"Your data was updated\", null);\n          });\n        } else {\n          inputSaveAddress.checked = false;\n          Sweetalert.fnc(\"error\", \"Please fill in the required fields\", null);\n        }\n      }\n    }\n    /*=============================================\n    Agregar código dial al input telefónico\n    =============================================*/\n    changeCountry(inputCountry) {\n      this.countries.forEach(country => {\n        if (inputCountry.value == country.name) {\n          this.dialCode = country.dial_code;\n          this.user.country_code = country.code;\n        }\n      });\n    }\n    /*=============================================\n    Función Callback()\n    =============================================*/\n    callback() {\n      if (this.render) {\n        this.render = false;\n        let totalShoppingCart = this.totalShoppingCart;\n        let localTotalPrice = this.totalPrice;\n        let localSubTotalPrice = this.subTotalPrice;\n        let localActivatedRoute = this.activatedRoute;\n        let localShoppingCart = this.shoppingCart;\n        let localProductsService = this.productsService;\n        let localUser = this.user;\n        let localDialCode = this.dialCode;\n        let localAddInfo = this.addInfo;\n        let localOrdersService = this.ordersService;\n        let localValidateCoupon = this.validateCoupon;\n        let localPaymentMethod = this.paymentMethod;\n        let localSalesService = this.salesService;\n        /*=============================================\n        Mostrar lista del carrito de compras con los precios definitivos\n        =============================================*/\n        setTimeout(function () {\n          let price = $(\".pCheckout .end-price\");\n          let quantity = $(\".qCheckout\");\n          let shipping = $(\".sCheckout\");\n          let subTotalPrice = $(\".subTotalPriceCheckout\");\n          let total = 0;\n          for (let i = 0; i < price.length; i++) {\n            /*=============================================\n            Sumar precio con envío\n            =============================================*/\n            let shipping_price = Number($(price[i]).html()) + Number($(shipping[i]).html());\n            /*=============================================\n            Multiplicar cantidad por precio con envío\n            =============================================*/\n            let subTotal = Number($(quantity[i]).html()) * shipping_price;\n            /*=============================================\n            Mostramos subtotales de cada producto\n            =============================================*/\n            $(subTotalPrice[i]).html(`$${subTotal.toFixed(2)}`);\n            localSubTotalPrice.push(subTotal.toFixed(2));\n            /*=============================================\n            Definimos el total de los precios\n            =============================================*/\n            total += subTotal;\n          }\n          $(\".totalCheckout\").html(`$${total.toFixed(2)}`);\n          localTotalPrice.push(total.toFixed(2));\n          /*=============================================\n          Validar la compra de PAYU\n          =============================================*/\n          if (localActivatedRoute.snapshot.queryParams[\"transactionState\"] == 4) {\n            let totalRender = 0;\n            /*=============================================\n            Tomamos la información de la venta\n            =============================================*/\n            localShoppingCart.forEach((product, index) => {\n              totalRender++;\n              /*=============================================\n              Enviar actualización de cantidad de producto vendido a la base de datos\n              =============================================*/\n              localProductsService.getFilterData(\"url\", product.url).subscribe(resp => {\n                for (const i in resp) {\n                  let id = Object.keys(resp).toString();\n                  let value = {\n                    sales: Number(resp[i].sales) + Number(product.quantity),\n                    stock: Number(resp[i].stock) - Number(product.quantity)\n                  };\n                  localProductsService.patchDataAuth(id, value, localStorage.getItem(\"idToken\")).subscribe(resp => {});\n                }\n              });\n              /*=============================================\n              Crear el proceso de entrega de la venta\n              =============================================*/\n              let moment = Math.floor(Number(product.delivery_time) / 2);\n              let sentDate = new Date();\n              sentDate.setDate(sentDate.getDate() + moment);\n              let deliveredDate = new Date();\n              deliveredDate.setDate(deliveredDate.getDate() + Number(product.delivery_time));\n              let proccess = [{\n                stage: \"reviewed\",\n                status: \"ok\",\n                comment: \"We have received your order, we start delivery process\",\n                date: new Date()\n              }, {\n                stage: \"sent\",\n                status: \"pending\",\n                comment: \"\",\n                date: sentDate\n              }, {\n                stage: \"delivered\",\n                status: \"pending\",\n                comment: \"\",\n                date: deliveredDate\n              }];\n              /*=============================================\n              Crear orden de venta en la base de datos\n              =============================================*/\n              let body = {\n                store: product.store,\n                user: localUser.username,\n                product: product.name,\n                url: product.url,\n                image: product.image,\n                category: product.category,\n                details: product.details,\n                quantity: product.quantity,\n                price: localSubTotalPrice[index],\n                email: localUser.email,\n                country: localUser.country,\n                city: localUser.city,\n                phone: `${localDialCode}-${localUser.phone}`,\n                address: localUser.address,\n                info: localAddInfo,\n                process: JSON.stringify(proccess),\n                status: \"pending\"\n              };\n              localOrdersService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {\n                if (resp[\"name\"] != \"\") {\n                  /*=============================================\n                  Separamos la comisión del Marketplace y el pago a la tienda del precio total de cada producto\n                  =============================================*/\n                  let commission = 0;\n                  let unitPrice = 0;\n                  if (localValidateCoupon) {\n                    commission = Number(localSubTotalPrice[index]) * 0.05;\n                    unitPrice = Number(localSubTotalPrice[index]) * 0.95;\n                  } else {\n                    commission = Number(localSubTotalPrice[index]) * 0.25;\n                    unitPrice = Number(localSubTotalPrice[index]) * 0.75;\n                  }\n                  /*=============================================\n                  Enviar información de la venta a la base de datos\n                  =============================================*/\n                  let body = {\n                    id_order: resp[\"name\"],\n                    client: localUser.username,\n                    product: product.name,\n                    url: product.url,\n                    quantity: product.quantity,\n                    unit_price: unitPrice.toFixed(2),\n                    commission: commission.toFixed(2),\n                    total: localSubTotalPrice[index],\n                    payment_method: \"Payu\",\n                    id_payment: localActivatedRoute.snapshot.queryParams[\"transactionId\"],\n                    date: new Date(),\n                    status: \"pending\"\n                  };\n                  localSalesService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {});\n                }\n              });\n            });\n            /*=============================================\n            Preguntamos cuando haya finalizado el proceso de guardar todo en la base de datos\n            =============================================*/\n            if (totalRender == localShoppingCart.length) {\n              localStorage.removeItem(\"list\");\n              Cookies.remove('coupon');\n              Sweetalert.fnc(\"success\", \"The purchase was successful\", \"account/my-shopping\");\n            }\n          }\n        }, totalShoppingCart * 500);\n      }\n    }\n    /*=============================================\n    Envío del formulario checkout\n    =============================================*/\n    onSubmit(f) {\n      /*=============================================\n      Validamos formulario para evitar campos vacíos\n      =============================================*/\n      if (f.invalid) {\n        Sweetalert.fnc(\"error\", \"Invalid Request\", null);\n        return;\n      }\n      /*=============================================\n      Sweetalert para esperar el proceso de ejecución\n      =============================================*/\n      Sweetalert.fnc(\"loading\", \"Loading...\", null);\n      /*=============================================\n      Pasarelas de pago\n      =============================================*/\n      if (f.value.paymentMethod == \"paypal\") {\n        /*=============================================\n        Checkout con Paypal\n        =============================================*/\n        Sweetalert.fnc(\"html\", `<div id=\"paypal-button-container\"></div>`, null);\n        /*=============================================\n        Ejecutamos función de Paypal pasando el precio total de la venta\n        =============================================*/\n        Paypal.fnc(this.totalPrice[0]).then(resp => {\n          if (resp) {\n            let totalRender = 0;\n            /*=============================================\n            Tomamos la información de la venta\n            =============================================*/\n            this.shoppingCart.forEach((product, index) => {\n              totalRender++;\n              /*=============================================\n              Enviar actualización de cantidad de producto vendido a la base de datos\n              =============================================*/\n              this.productsService.getFilterData(\"url\", product.url).subscribe(resp => {\n                for (const i in resp) {\n                  let id = Object.keys(resp).toString();\n                  let value = {\n                    sales: Number(resp[i].sales) + Number(product.quantity),\n                    stock: Number(resp[i].stock) - Number(product.quantity)\n                  };\n                  this.productsService.patchDataAuth(id, value, localStorage.getItem(\"idToken\")).subscribe(resp => {});\n                }\n              });\n              /*=============================================\n              Crear el proceso de entrega de la venta\n              =============================================*/\n              let moment = Math.floor(Number(product.delivery_time) / 2);\n              let sentDate = new Date();\n              sentDate.setDate(sentDate.getDate() + moment);\n              let deliveredDate = new Date();\n              deliveredDate.setDate(deliveredDate.getDate() + Number(product.delivery_time));\n              let proccess = [{\n                stage: \"reviewed\",\n                status: \"ok\",\n                comment: \"We have received your order, we start delivery process\",\n                date: new Date()\n              }, {\n                stage: \"sent\",\n                status: \"pending\",\n                comment: \"\",\n                date: sentDate\n              }, {\n                stage: \"delivered\",\n                status: \"pending\",\n                comment: \"\",\n                date: deliveredDate\n              }];\n              /*=============================================\n              Crear orden de venta en la base de datos\n              =============================================*/\n              let body = {\n                store: product.store,\n                user: this.user.username,\n                product: product.name,\n                url: product.url,\n                image: product.image,\n                category: product.category,\n                details: product.details,\n                quantity: product.quantity,\n                price: this.subTotalPrice[index],\n                email: f.value.email,\n                country: f.value.country,\n                city: f.value.city,\n                phone: `${this.dialCode}-${f.value.phone}`,\n                address: f.value.address,\n                info: f.value.addInfo,\n                process: JSON.stringify(proccess),\n                status: \"pending\",\n                date: new Date()\n              };\n              this.ordersService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {\n                if (resp[\"name\"] != \"\") {\n                  /*=============================================\n                  Separamos la comisión del Marketplace y el pago a la tienda del precio total de cada producto\n                  =============================================*/\n                  let commission = 0;\n                  let unitPrice = 0;\n                  if (this.validateCoupon) {\n                    commission = Number(this.subTotalPrice[index]) * 0.05;\n                    unitPrice = Number(this.subTotalPrice[index]) * 0.95;\n                  } else {\n                    commission = Number(this.subTotalPrice[index]) * 0.25;\n                    unitPrice = Number(this.subTotalPrice[index]) * 0.75;\n                  }\n                  /*=============================================\n                  Enviar información de la venta a la base de datos\n                  =============================================*/\n                  let id_payment = localStorage.getItem(\"id_payment\");\n                  let body = {\n                    id_order: resp[\"name\"],\n                    client: this.user.username,\n                    product: product.name,\n                    url: product.url,\n                    quantity: product.quantity,\n                    unit_price: unitPrice.toFixed(2),\n                    commission: commission.toFixed(2),\n                    total: this.subTotalPrice[index],\n                    payment_method: f.value.paymentMethod,\n                    id_payment: id_payment,\n                    date: new Date(),\n                    status: \"pending\"\n                  };\n                  this.salesService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {});\n                }\n              });\n            });\n            /*=============================================\n            Preguntamos cuando haya finalizado el proceso de guardar todo en la base de datos\n            =============================================*/\n            if (totalRender == this.shoppingCart.length) {\n              localStorage.removeItem(\"list\");\n              Cookies.remove('coupon');\n              Sweetalert.fnc(\"success\", \"The purchase was successful\", \"account/my-shopping\");\n            }\n          } else {\n            Sweetalert.fnc(\"error\", \"The purchase was not made, please try again\", null);\n          }\n        });\n      } else if (f.value.paymentMethod == \"payu\") {\n        /*=============================================\n        Checkout con Payu\n        =============================================*/\n        let action = Payu.action;\n        let merchantId = Payu.merchantId;\n        let accountId = Payu.accountId;\n        let responseUrl = Payu.responseUrl;\n        let confirmationUrl = Payu.confirmationUrl;\n        let apiKey = Payu.apiKey;\n        let test = Payu.test;\n        /*=============================================\n        Capturar la descripción\n        =============================================*/\n        let description = \"\";\n        this.shoppingCart.forEach(product => {\n          description += `${product.name} x${product.quantity}, `;\n        });\n        description = description.slice(0, -2);\n        /*=============================================\n        Creamos el código de referencia\n        =============================================*/\n        let referenceCode = Math.ceil(Math.random() * 1000000);\n        /*=============================================\n        Creamos la firma de Payu\n        =============================================*/\n        let signature = Md5.init(`${apiKey}~${merchantId}~${referenceCode}~${this.totalPrice[0]}~USD`);\n        /*=============================================\n        Subimos compra de Payu a Base de datos\n        =============================================*/\n        let totalRender = 0;\n        let idOrders = [];\n        let idSales = [];\n        let idProducts = [];\n        /*=============================================\n        Tomamos la información de la venta\n        =============================================*/\n        this.shoppingCart.forEach((product, index) => {\n          totalRender++;\n          /*=============================================\n          Enviar actualización de cantidad de producto vendido a la base de datos\n          =============================================*/\n          this.productsService.getFilterData(\"url\", product.url).subscribe(resp => {\n            for (const i in resp) {\n              let id = Object.keys(resp).toString();\n              idProducts.push(`${id},${product.quantity}`);\n            }\n          });\n          /*=============================================\n          Crear el proceso de entrega de la venta\n          =============================================*/\n          let moment = Math.floor(Number(product.delivery_time) / 2);\n          let sentDate = new Date();\n          sentDate.setDate(sentDate.getDate() + moment);\n          let deliveredDate = new Date();\n          deliveredDate.setDate(deliveredDate.getDate() + Number(product.delivery_time));\n          let proccess = [{\n            stage: \"reviewed\",\n            status: \"ok\",\n            comment: \"We have received your order, we start delivery process\",\n            date: new Date()\n          }, {\n            stage: \"sent\",\n            status: \"pending\",\n            comment: \"\",\n            date: sentDate\n          }, {\n            stage: \"delivered\",\n            status: \"pending\",\n            comment: \"\",\n            date: deliveredDate\n          }];\n          /*=============================================\n          Crear orden de venta en la base de datos\n          =============================================*/\n          let body = {\n            store: product.store,\n            user: this.user.username,\n            product: product.name,\n            url: product.url,\n            image: product.image,\n            category: product.category,\n            details: product.details,\n            quantity: product.quantity,\n            price: this.subTotalPrice[index],\n            email: f.value.email,\n            country: f.value.country,\n            city: f.value.city,\n            phone: `${this.dialCode}-${f.value.phone}`,\n            address: f.value.address,\n            info: f.value.addInfo,\n            process: JSON.stringify(proccess),\n            status: \"test\",\n            date: new Date()\n          };\n          this.ordersService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {\n            if (resp[\"name\"] != \"\") {\n              idOrders.push(resp[\"name\"]);\n              /*=============================================\n              Separamos la comisión del Marketplace y el pago a la tienda del precio total de cada producto\n              =============================================*/\n              let commission = 0;\n              let unitPrice = 0;\n              if (this.validateCoupon) {\n                commission = Number(this.subTotalPrice[index]) * 0.05;\n                unitPrice = Number(this.subTotalPrice[index]) * 0.95;\n              } else {\n                commission = Number(this.subTotalPrice[index]) * 0.25;\n                unitPrice = Number(this.subTotalPrice[index]) * 0.75;\n              }\n              /*=============================================\n              Enviar información de la venta a la base de datos\n              =============================================*/\n              let id_payment = localStorage.getItem(\"id_payment\");\n              let body = {\n                id_order: resp[\"name\"],\n                client: this.user.username,\n                product: product.name,\n                url: product.url,\n                quantity: product.quantity,\n                unit_price: unitPrice.toFixed(2),\n                commission: commission.toFixed(2),\n                total: this.subTotalPrice[index],\n                payment_method: f.value.paymentMethod,\n                id_payment: \"\",\n                date: new Date(),\n                status: \"test\"\n              };\n              this.salesService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {\n                if (resp[\"name\"] != \"\") {\n                  idSales.push(resp[\"name\"]);\n                }\n              });\n            }\n          });\n        });\n        /*=============================================\n        Preguntamos cuando haya finalizado el proceso de guardar todo en la base de datos\n        =============================================*/\n        if (totalRender == this.shoppingCart.length) {\n          let localTotalPrice = this.totalPrice[0];\n          let localEmail = this.user.email;\n          setTimeout(function () {\n            /*=============================================\n            Formulario web checkout de Payu\n            =============================================*/\n            let formPayu = `\n\n\t\t\t\t\t\t<img src=\"assets/img/payment-method/payu_logo.png\" style=\"width:100px\" />\n\n\t\t\t\t\t\t <form method=\"post\" action=\"${action}\">\n\t\t\t\t\t\t  <input name=\"merchantId\"    type=\"hidden\"  value=\"${merchantId}\"   >\n\t\t\t\t\t\t  <input name=\"accountId\"     type=\"hidden\"  value=\"${accountId}\" >\n\t\t\t\t\t\t  <input name=\"description\"   type=\"hidden\"  value=\"${description}\"  >\n\t\t\t\t\t\t  <input name=\"referenceCode\" type=\"hidden\"  value=\"${referenceCode}\" >\n\t\t\t\t\t\t  <input name=\"amount\"        type=\"hidden\"  value=\"${localTotalPrice}\"   >\n\t\t\t\t\t\t  <input name=\"tax\"           type=\"hidden\"  value=\"0\"  >\n\t\t\t\t\t\t  <input name=\"taxReturnBase\" type=\"hidden\"  value=\"0\" >\n\t\t\t\t\t\t  <input name=\"currency\"      type=\"hidden\"  value=\"USD\" >\n\t\t\t\t\t\t  <input name=\"signature\"     type=\"hidden\"  value=\"${signature}\"  >\n\t\t\t\t\t\t  <input name=\"test\"          type=\"hidden\"  value=\"${test}\" >\n\t\t\t\t\t\t  <input name=\"buyerEmail\"    type=\"hidden\"  value=\"${localEmail}\" >\n\t\t\t\t\t\t  <input name=\"responseUrl\"    type=\"hidden\"  value=\"${responseUrl}\" >\n\t\t\t\t\t\t  <input name=\"confirmationUrl\"    type=\"hidden\"  value=\"${confirmationUrl}\" >\n\t\t\t\t\t\t  <input name=\"extra1\" type=\"hidden\" value='${JSON.stringify(idProducts)}'>\n\t\t\t\t\t\t  <input name=\"extra2\" type=\"hidden\" value='${JSON.stringify(idOrders)}'>\n\t\t\t\t\t\t  <input name=\"extra3\" type=\"hidden\" value='${JSON.stringify(idSales)}'>\t\t\t\t \n\t\t\t\t\t\t  <input name=\"Submit\" type=\"submit\" class=\"ps-btn p-0 px-5\"  value=\"Next\" >\n\t\t\t\t\t\t</form>`;\n            /*=============================================\n            Listado de tarjetas de crédito\n            =============================================*/\n            //https://www.mercadopago.com.co/developers/es/guides/payments/web-tokenize-checkout/testing/\n            /*=============================================\n            Sacar el botón de Payu en una alerta suave\n            =============================================*/\n            Sweetalert.fnc(\"html\", formPayu, null);\n          }, totalRender * 1000);\n        }\n      } else if (f.value.paymentMethod == \"mercado-pago\") {\n        /*=============================================\n        Checkout con Mercado Pago\n        =============================================*/\n        let formMP = `<img src=\"assets/img/payment-method/mp_logo.png\" style=\"width:100px\" />\n\t\t\t\t\t\t  <div><a class=\"ps-btn p-0 px-5 popupMP\">Next</a></div>`;\n        /*=============================================\n        Sacar el botón de MercadoPago en una alerta suave\n        =============================================*/\n        Sweetalert.fnc(\"html\", formMP, null);\n        /*=============================================\n        Abrir ventana emergente de MP\n        =============================================*/\n        let localTotalPrice = this.totalPrice[0].toString();\n        /*=============================================\n        Capturar la descripción\n        =============================================*/\n        let description = \"\";\n        this.shoppingCart.forEach(product => {\n          description += `${product.name} x${product.quantity}, `;\n        });\n        description = description.slice(0, -2);\n        /*=============================================\n        Capturar el email\n        =============================================*/\n        let email = this.user.email;\n        let path = this.path;\n        $(document).on(\"click\", \".popupMP\", function () {\n          Cookies.set(\"_x\", window.btoa(localTotalPrice), {\n            expires: 1\n          });\n          Cookies.set(\"_p\", description, {\n            expires: 1\n          });\n          Cookies.set(\"_e\", email, {\n            expires: 1\n          });\n          window.open(`${path}mercadopago/index.php?_x=${Md5.init(localTotalPrice)}`, \"_blank\", \"width=950,height=650,scrollbars=NO\");\n        });\n        /*=============================================\n        Validar la compra de Mercado Pago\n        =============================================*/\n        let count = 0;\n        /*=============================================\n        Convertir variables globales en locales\n        =============================================*/\n        let localSubTotalPrice = this.subTotalPrice;\n        let localShoppingCart = this.shoppingCart;\n        let localProductsService = this.productsService;\n        let localUser = this.user;\n        let localDialCode = this.dialCode;\n        let localAddInfo = this.addInfo;\n        let localOrdersService = this.ordersService;\n        let localValidateCoupon = this.validateCoupon;\n        let localPaymentMethod = this.paymentMethod;\n        let localSalesService = this.salesService;\n        let interval = setInterval(function () {\n          count++;\n          /*=============================================\n          Validar la compra de Mercado Pago\n          =============================================*/\n          if (localStorage.getItem('_i') != undefined && localStorage.getItem('_k') != undefined && localStorage.getItem('_a') != undefined && localStorage.getItem('_k') == MercadoPago.public_key && localStorage.getItem('_a') == MercadoPago.access_token) {\n            let totalRender = 0;\n            /*=============================================\n            Tomamos la información de la venta\n            =============================================*/\n            localShoppingCart.forEach((product, index) => {\n              totalRender++;\n              /*=============================================\n              Enviar actualización de cantidad de producto vendido a la base de datos\n              =============================================*/\n              localProductsService.getFilterData(\"url\", product.url).subscribe(resp => {\n                for (const i in resp) {\n                  let id = Object.keys(resp).toString();\n                  let value = {\n                    sales: Number(resp[i].sales) + Number(product.quantity),\n                    stock: Number(resp[i].stock) - Number(product.quantity)\n                  };\n                  localProductsService.patchDataAuth(id, value, localStorage.getItem(\"idToken\")).subscribe(resp => {});\n                }\n              });\n              /*=============================================\n              Crear el proceso de entrega de la venta\n              =============================================*/\n              let moment = Math.floor(Number(product.delivery_time) / 2);\n              let sentDate = new Date();\n              sentDate.setDate(sentDate.getDate() + moment);\n              let deliveredDate = new Date();\n              deliveredDate.setDate(deliveredDate.getDate() + Number(product.delivery_time));\n              let proccess = [{\n                stage: \"reviewed\",\n                status: \"ok\",\n                comment: \"We have received your order, we start delivery process\",\n                date: new Date()\n              }, {\n                stage: \"sent\",\n                status: \"pending\",\n                comment: \"\",\n                date: sentDate\n              }, {\n                stage: \"delivered\",\n                status: \"pending\",\n                comment: \"\",\n                date: deliveredDate\n              }];\n              /*=============================================\n              Crear orden de venta en la base de datos\n              =============================================*/\n              let body = {\n                store: product.store,\n                user: localUser.username,\n                product: product.name,\n                url: product.url,\n                image: product.image,\n                category: product.category,\n                details: product.details,\n                quantity: product.quantity,\n                price: localSubTotalPrice[index],\n                email: localUser.email,\n                country: localUser.country,\n                city: localUser.city,\n                phone: `${localDialCode}-${localUser.phone}`,\n                address: localUser.address,\n                info: localAddInfo,\n                process: JSON.stringify(proccess),\n                status: \"pending\",\n                date: new Date()\n              };\n              localOrdersService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {\n                if (resp[\"name\"] != \"\") {\n                  /*=============================================\n                  Separamos la comisión del Marketplace y el pago a la tienda del precio total de cada producto\n                  =============================================*/\n                  let commission = 0;\n                  let unitPrice = 0;\n                  if (localValidateCoupon) {\n                    commission = Number(localSubTotalPrice[index]) * 0.05;\n                    unitPrice = Number(localSubTotalPrice[index]) * 0.95;\n                  } else {\n                    commission = Number(localSubTotalPrice[index]) * 0.25;\n                    unitPrice = Number(localSubTotalPrice[index]) * 0.75;\n                  }\n                  /*=============================================\n                  Enviar información de la venta a la base de datos\n                  =============================================*/\n                  let body = {\n                    id_order: resp[\"name\"],\n                    client: localUser.username,\n                    product: product.name,\n                    url: product.url,\n                    quantity: product.quantity,\n                    unit_price: unitPrice.toFixed(2),\n                    commission: commission.toFixed(2),\n                    total: localSubTotalPrice[index],\n                    payment_method: \"Mercado Pago\",\n                    id_payment: localStorage.getItem('_i'),\n                    date: new Date(),\n                    status: \"pending\"\n                  };\n                  localSalesService.registerDatabase(body, localStorage.getItem(\"idToken\")).subscribe(resp => {});\n                }\n              });\n            });\n            /*=============================================\n            Preguntamos cuando haya finalizado el proceso de guardar todo en la base de datos\n            =============================================*/\n            if (totalRender == localShoppingCart.length) {\n              clearInterval(interval);\n              localStorage.removeItem(\"list\");\n              localStorage.removeItem(\"_a\");\n              localStorage.removeItem(\"_k\");\n              Cookies.remove('coupon');\n              Sweetalert.fnc(\"success\", \"The purchase was successful\", \"account/my-shopping\");\n            }\n          }\n          /*=============================================\n          Detenemos el intervalo\n          =============================================*/\n          if (count > 300) {\n            clearInterval(interval);\n            window.open(\"account\", \"_parent\");\n          }\n        }, 1000);\n      } else {\n        Sweetalert.fnc(\"error\", \"Invalid request\", null);\n        return;\n      }\n    }\n    static {\n      this.ɵfac = function CheckoutComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || CheckoutComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.ProductsService), i0.ɵɵdirectiveInject(i4.OrdersService), i0.ɵɵdirectiveInject(i5.SalesService), i0.ɵɵdirectiveInject(i6.StoresService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CheckoutComponent,\n        selectors: [[\"app-checkout\"]],\n        decls: 130,\n        vars: 26,\n        consts: [[\"f\", \"ngForm\"], [\"inputCountry\", \"\"], [\"inputCity\", \"\"], [\"inputPhone\", \"\"], [\"inputAddress\", \"\"], [\"inputSaveAddress\", \"\"], [1, \"ps-breadcrumb\"], [1, \"container\"], [1, \"breadcrumb\"], [\"routerLink\", \"/\"], [\"href\", \"shopping-cart\"], [1, \"ps-checkout\", \"ps-section--shopping\"], [1, \"ps-section__header\"], [1, \"ps-section__content\"], [1, \"ps-form--checkout\", 3, \"ngSubmit\"], [1, \"row\"], [1, \"col-xl-7\", \"col-lg-8\", \"col-sm-12\"], [1, \"ps-form__billing-info\"], [1, \"ps-form__heading\"], [1, \"form-group\"], [1, \"form-group__content\"], [\"type\", \"text\", \"name\", \"displayName\", \"readonly\", \"\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"email\", \"name\", \"email\", \"email\", \"\", \"readonly\", \"\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"country\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"change\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"text\", \"name\", \"city\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-group__content\", \"input-group\"], [1, \"input-group-append\"], [1, \"input-group-text\"], [\"type\", \"text\", \"name\", \"phone\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"text\", \"name\", \"address\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"ps-checkbox\"], [\"type\", \"checkbox\", \"id\", \"create-account\", \"name\", \"saveAddress\", 1, \"form-control\", 3, \"ngModelChange\", \"change\", \"ngModel\"], [\"for\", \"create-account\"], [1, \"mt-40\"], [\"rows\", \"7\", \"placeholder\", \"Notes about your order, e.g. special notes for delivery.\", \"name\", \"addInfo\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"col-xl-5\", \"col-lg-4\", \"col-sm-12\"], [1, \"ps-form__total\"], [1, \"content\"], [1, \"ps-block--checkout-total\"], [1, \"ps-block__header\", \"d-flex\", \"justify-content-between\"], [1, \"ps-block__content\"], [1, \"table\", \"ps-block__products\"], [4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"], [1, \"py-3\"], [1, \"ps-radio\"], [\"type\", \"radio\", \"id\", \"pay-paypal\", \"name\", \"paymentMethod\", \"value\", \"paypal\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"pay-paypal\"], [1, \"w-50\", 3, \"src\"], [\"type\", \"radio\", \"id\", \"pay-payu\", \"name\", \"paymentMethod\", \"value\", \"payu\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"pay-payu\"], [\"type\", \"radio\", \"id\", \"pay-mercadopago\", \"name\", \"paymentMethod\", \"value\", \"mercado-pago\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"pay-mercadopago\"], [\"type\", \"submit\", 1, \"ps-btn\", \"ps-btn--fullwidth\"], [3, \"value\"], [1, \"text-danger\"], [3, \"href\"], [1, \"small\", \"text-secondary\"], [1, \"qCheckout\"], [1, \"d-none\", \"sCheckout\"], [1, \"text-right\", \"ps-product\"], [1, \"d-none\", \"pCheckout\", 3, \"innerHTML\"], [1, \"subTotalPriceCheckout\"], [1, \"spinner-border\"]],\n        template: function CheckoutComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"ul\", 8)(3, \"li\")(4, \"a\", 9);\n            i0.ɵɵtext(5, \"Home\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(6, \"li\")(7, \"a\", 10);\n            i0.ɵɵtext(8, \"Shopping cart\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"li\");\n            i0.ɵɵtext(10, \"Checkout\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(11, \"div\", 11)(12, \"div\", 7)(13, \"div\", 12)(14, \"h1\");\n            i0.ɵɵtext(15, \"Checkout\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(16, \"div\", 13)(17, \"form\", 14, 0);\n            i0.ɵɵlistener(\"ngSubmit\", function CheckoutComponent_Template_form_ngSubmit_17_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const f_r2 = i0.ɵɵreference(18);\n              return i0.ɵɵresetView(ctx.onSubmit(f_r2));\n            });\n            i0.ɵɵelementStart(19, \"div\", 15)(20, \"div\", 16)(21, \"div\", 17)(22, \"h3\", 18);\n            i0.ɵɵtext(23, \"Billing Details\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"div\", 19)(25, \"label\");\n            i0.ɵɵtext(26, \"Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(27, \"div\", 20)(28, \"input\", 21);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_28_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.displayName, $event) || (ctx.user.displayName = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(29, \"div\", 19)(30, \"label\");\n            i0.ɵɵtext(31, \"Email Address\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"div\", 20)(33, \"input\", 22);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_33_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.email, $event) || (ctx.user.email = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(34, \"div\", 19)(35, \"label\");\n            i0.ɵɵtext(36, \"Country\");\n            i0.ɵɵelementStart(37, \"sup\");\n            i0.ɵɵtext(38, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(39, \"div\", 20)(40, \"select\", 23, 1);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_select_ngModelChange_40_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.country, $event) || (ctx.user.country = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵlistener(\"change\", function CheckoutComponent_Template_select_change_40_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const inputCountry_r3 = i0.ɵɵreference(41);\n              return i0.ɵɵresetView(ctx.changeCountry(inputCountry_r3));\n            });\n            i0.ɵɵtemplate(42, CheckoutComponent_option_42_Template, 2, 2, \"option\", 24);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(43, CheckoutComponent_div_43_Template, 2, 0, \"div\", 25);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(44, \"div\", 19)(45, \"label\");\n            i0.ɵɵtext(46, \"City\");\n            i0.ɵɵelementStart(47, \"sup\");\n            i0.ɵɵtext(48, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(49, \"div\", 20)(50, \"input\", 26, 2);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_50_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.city, $event) || (ctx.user.city = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(52, CheckoutComponent_div_52_Template, 2, 0, \"div\", 25);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(53, \"div\", 19)(54, \"label\");\n            i0.ɵɵtext(55, \"Phone\");\n            i0.ɵɵelementStart(56, \"sup\");\n            i0.ɵɵtext(57, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(58, \"div\", 27)(59, \"div\", 28)(60, \"span\", 29);\n            i0.ɵɵtext(61);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(62, \"input\", 30, 3);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_62_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.phone, $event) || (ctx.user.phone = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(64, CheckoutComponent_div_64_Template, 2, 0, \"div\", 25);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(65, \"div\", 19)(66, \"label\");\n            i0.ɵɵtext(67, \"Address\");\n            i0.ɵɵelementStart(68, \"sup\");\n            i0.ɵɵtext(69, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(70, \"div\", 20)(71, \"input\", 31, 4);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_71_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.user.address, $event) || (ctx.user.address = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(73, CheckoutComponent_div_73_Template, 2, 0, \"div\", 25);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(74, \"div\", 19)(75, \"div\", 32)(76, \"input\", 33, 5);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_76_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.saveAddress, $event) || (ctx.saveAddress = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵlistener(\"change\", function CheckoutComponent_Template_input_change_76_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const inputCountry_r3 = i0.ɵɵreference(41);\n              const inputCity_r5 = i0.ɵɵreference(51);\n              const inputPhone_r6 = i0.ɵɵreference(63);\n              const inputAddress_r7 = i0.ɵɵreference(72);\n              const inputSaveAddress_r8 = i0.ɵɵreference(77);\n              return i0.ɵɵresetView(ctx.saveAddressFnc(inputCountry_r3, inputCity_r5, inputPhone_r6, inputAddress_r7, inputSaveAddress_r8));\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(78, \"label\", 34);\n            i0.ɵɵtext(79, \"Save address?\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(80, \"h3\", 35);\n            i0.ɵɵtext(81, \" Addition information\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(82, \"div\", 19)(83, \"label\");\n            i0.ɵɵtext(84, \"Order Notes\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(85, \"div\", 20)(86, \"textarea\", 36);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_textarea_ngModelChange_86_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.addInfo, $event) || (ctx.addInfo = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(87, \"div\", 37)(88, \"div\", 38)(89, \"h3\", 18);\n            i0.ɵɵtext(90, \"Your Order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(91, \"div\", 39)(92, \"div\", 40)(93, \"div\", 41)(94, \"p\");\n            i0.ɵɵtext(95, \"Product\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(96, \"p\");\n            i0.ɵɵtext(97, \"Total\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(98, \"div\", 42)(99, \"table\", 43)(100, \"tbody\");\n            i0.ɵɵtemplate(101, CheckoutComponent_tr_101_Template, 16, 8, \"tr\", 44);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(102, \"div\", 45);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(103, \"hr\", 46);\n            i0.ɵɵelementStart(104, \"h3\", 18);\n            i0.ɵɵtext(105, \"Select Pay Method\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(106, CheckoutComponent_div_106_Template, 2, 0, \"div\", 25);\n            i0.ɵɵelementStart(107, \"div\", 19)(108, \"div\", 47)(109, \"input\", 48);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_109_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.paymentMethod, $event) || (ctx.paymentMethod = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(110, \"label\", 49);\n            i0.ɵɵtext(111, \"Pay with Paypal? \");\n            i0.ɵɵelementStart(112, \"span\");\n            i0.ɵɵelement(113, \"img\", 50);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(114, \"div\", 19)(115, \"div\", 47)(116, \"input\", 51);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_116_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.paymentMethod, $event) || (ctx.paymentMethod = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(117, \"label\", 52);\n            i0.ɵɵtext(118, \"Pay with Payu? \");\n            i0.ɵɵelementStart(119, \"span\");\n            i0.ɵɵelement(120, \"img\", 50);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(121, \"div\", 19)(122, \"div\", 47)(123, \"input\", 53);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CheckoutComponent_Template_input_ngModelChange_123_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.paymentMethod, $event) || (ctx.paymentMethod = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(124, \"label\", 54);\n            i0.ɵɵtext(125, \"Pay with Mercado Pago? \");\n            i0.ɵɵelementStart(126, \"span\");\n            i0.ɵɵelement(127, \"img\", 50);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(128, \"button\", 55);\n            i0.ɵɵtext(129, \"Proceed to checkout\");\n            i0.ɵɵelementEnd()()()()()()()()();\n          }\n          if (rf & 2) {\n            const f_r2 = i0.ɵɵreference(18);\n            i0.ɵɵadvance(28);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.displayName);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.email);\n            i0.ɵɵadvance(7);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.country);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.countries);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"country\"].errors);\n            i0.ɵɵadvance(7);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.city);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"city\"].errors);\n            i0.ɵɵadvance(9);\n            i0.ɵɵtextInterpolate(ctx.dialCode);\n            i0.ɵɵadvance();\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.phone);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"phone\"].errors);\n            i0.ɵɵadvance(7);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.address);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"address\"].errors);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.saveAddress);\n            i0.ɵɵadvance(10);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.addInfo);\n            i0.ɵɵadvance(15);\n            i0.ɵɵproperty(\"ngForOf\", ctx.shoppingCart);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"innerHTML\", ctx.totalP, i0.ɵɵsanitizeHtml);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", f_r2.submitted && f_r2.controls[\"paymentMethod\"].errors);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.paymentMethod);\n            i0.ɵɵadvance(4);\n            i0.ɵɵpropertyInterpolate1(\"src\", \"\", ctx.path, \"img/payment-method/paypal.jpg\", i0.ɵɵsanitizeUrl);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.paymentMethod);\n            i0.ɵɵadvance(4);\n            i0.ɵɵpropertyInterpolate1(\"src\", \"\", ctx.path, \"img/payment-method/payu.jpg\", i0.ɵɵsanitizeUrl);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.paymentMethod);\n            i0.ɵɵadvance(4);\n            i0.ɵɵpropertyInterpolate1(\"src\", \"\", ctx.path, \"img/payment-method/mercado_pago.jpg\", i0.ɵɵsanitizeUrl);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return CheckoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}