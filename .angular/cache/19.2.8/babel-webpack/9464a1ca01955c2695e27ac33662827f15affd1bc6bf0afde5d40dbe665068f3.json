{"ast":null,"code":"import { Api } from '../config';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductsService = /*#__PURE__*/(() => {\n  class ProductsService {\n    constructor(http) {\n      this.http = http;\n      this.api = Api.url;\n    }\n    getData() {\n      return this.http.get(`${this.api}products.json`).pipe(map(resp => {\n        let newResp = [];\n        let count = 0;\n        for (const i in resp) {\n          count++;\n          if (JSON.parse(resp[i].feedback).type == \"approved\") {\n            newResp[i] = resp[i];\n          }\n        }\n        if (count == Object.keys(resp).length) {\n          return newResp;\n        }\n      }));\n    }\n    getLimitData(startAt, limitToFirst) {\n      return this.http.get(`${this.api}products.json?orderBy=\"$key\"&startAt=\"${startAt}\"&limitToFirst=${limitToFirst}&print=pretty`).pipe(map(resp => {\n        let newResp = [];\n        let count = 0;\n        for (const i in resp) {\n          count++;\n          if (JSON.parse(resp[i].feedback).type == \"approved\") {\n            newResp[i] = resp[i];\n          }\n        }\n        if (count == Object.keys(resp).length) {\n          return newResp;\n        }\n      }));\n    }\n    getFilterData(orderBy, equalTo) {\n      return this.http.get(`${this.api}products.json?orderBy=\"${orderBy}\"&equalTo=\"${equalTo}\"&print=pretty`).pipe(map(resp => {\n        let newResp = [];\n        let count = 0;\n        for (const i in resp) {\n          count++;\n          if (JSON.parse(resp[i].feedback).type == \"approved\") {\n            newResp[i] = resp[i];\n          }\n        }\n        if (count == Object.keys(resp).length) {\n          return newResp;\n        }\n      }));\n    }\n    getFilterDataMyStore(orderBy, equalTo) {\n      return this.http.get(`${this.api}products.json?orderBy=\"${orderBy}\"&equalTo=\"${equalTo}\"&print=pretty`);\n    }\n    getFilterDataWithLimit(orderBy, equalTo, limitToFirst) {\n      return this.http.get(`${this.api}products.json?orderBy=\"${orderBy}\"&equalTo=\"${equalTo}\"&limitToFirst=${limitToFirst}&print=pretty`).pipe(map(resp => {\n        let newResp = [];\n        let count = 0;\n        for (const i in resp) {\n          count++;\n          if (JSON.parse(resp[i].feedback).type == \"approved\") {\n            newResp[i] = resp[i];\n          }\n        }\n        if (count == Object.keys(resp).length) {\n          return newResp;\n        }\n      }));\n    }\n    getSearchData(orderBy, param) {\n      return this.http.get(`${this.api}products.json?orderBy=\"${orderBy}\"&startAt=\"${param}\"&endAt=\"${param}\\uf8ff\"&print=pretty`).pipe(map(resp => {\n        let newResp = [];\n        let count = 0;\n        for (const i in resp) {\n          count++;\n          if (JSON.parse(resp[i].feedback).type == \"approved\") {\n            newResp[i] = resp[i];\n          }\n        }\n        if (count == Object.keys(resp).length) {\n          return newResp;\n        }\n      }));\n    }\n    getFilterDataStore(orderBy, equalTo) {\n      return this.http.get(`${this.api}products.json?orderBy=\"${orderBy}\"&equalTo=\"${equalTo}\"&print=pretty`);\n    }\n    patchData(id, value) {\n      return this.http.patch(`${this.api}products/${id}.json`, value);\n    }\n    getUniqueData(value) {\n      return this.http.get(`${this.api}products/${value}.json`);\n    }\n    patchDataAuth(id, value, idToken) {\n      return this.http.patch(`${this.api}products/${id}.json?auth=${idToken}`, value);\n    }\n    /*=============================================\n    Registro en Firebase Database\n    =============================================*/\n    registerDatabase(body, idToken) {\n      return this.http.post(`${this.api}/products.json?auth=${idToken}`, body);\n    }\n    /*=============================================\n    Eliminar registro en Firebase\n    =============================================*/\n    deleteDataAuth(id, idToken) {\n      return this.http.delete(`${this.api}products/${id}.json?auth=${idToken}`);\n    }\n    static {\n      this.ɵfac = function ProductsService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductsService,\n        factory: ProductsService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ProductsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}